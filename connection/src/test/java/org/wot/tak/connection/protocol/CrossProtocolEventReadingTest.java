package org.wot.tak.connection.protocol;

import org.junit.jupiter.api.Test;
import org.wot.tak.connection.protocol.protobuf.ProtobufEventReader;
import org.wot.tak.connection.protocol.xml.XmlEventReader;

import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Arrays;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.wot.tak.connection.messages.asserts.xml.CotAssert.assertAuth;

public class CrossProtocolEventReadingTest {

    @Test
    void readAuthFromXmlProtocol_readAFromProtobufProtocol_XmlThenProtobufMessage_returnBothMessages()
            throws Exception {
        var auth = "<?xml version='1.0'?>\n"
                   + "  <auth>\n"
                   + "    <cot username='user' password='pass' "
                   + "uid='S-1-5-21-1650500091-1818354749-1389322093-1000'/>\n"
                   + "  </auth>";

        var authBytes = auth.getBytes();

        //........a-f-G-U-C-I*.S-1-5-21-1650500091-1818354749-1389322093-10000.....18.....1@.....1J.h-g-i-g-oi...
        //...cAq......cAz....<uid Droid="FIRST FLT CNTRL"/>....*:-1:stcp..FIRST FLT CNTRL....Cyan..Team Member*..d2K.
        //.innotek GmbH VirtualBox..WinTAK-CIV..Microsoft Windows 11 Home".4.8.0.168:.
        var protobufBytes = new byte[]{
                (byte) 0xbf, (byte) 0x9b, 0x02, 0x12, (byte) 0x98, 0x02, 0x0a,
                0x0b, 0x61, 0x2d, 0x66, 0x2d, 0x47, 0x2d, 0x55, 0x2d, 0x43, 0x2d, 0x49, 0x2a, 0x2e, 0x53, 0x2d, 0x31,
                0x2d, 0x35, 0x2d, 0x32, 0x31, 0x2d, 0x31, 0x36, 0x35, 0x30, 0x35, 0x30, 0x30, 0x30, 0x39, 0x31, 0x2d,
                0x31, 0x38, 0x31, 0x38, 0x33, 0x35, 0x34, 0x37, 0x34, 0x39, 0x2d, 0x31, 0x33, 0x38, 0x39, 0x33, 0x32,
                0x32, 0x30, 0x39, 0x33, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, (byte) 0xb2, (byte) 0x86, (byte) 0x9c,
                (byte) 0xb8, (byte) 0xa4, 0x31, 0x38, (byte) 0xb2, (byte) 0x86, (byte) 0x9c, (byte) 0xb8, (byte) 0xa4,
                0x31, 0x40, (byte) 0x8a, (byte) 0xf8, (byte) 0xb2, (byte) 0xb8, (byte) 0xa4, 0x31, 0x4a, 0x09, 0x68,
                0x2d, 0x67, 0x2d, 0x69, 0x2d, 0x67, 0x2d, 0x6f, 0x69, 0x00, 0x00, 0x00, (byte) 0xe0, (byte) 0xcf, 0x12,
                0x63, 0x41, 0x71, 0x00, 0x00, 0x00, (byte) 0xe0, (byte) 0xcf, 0x12, 0x63, 0x41, 0x7a, (byte) 0xa6, 0x01,
                0x0a, 0x1e, 0x3c, 0x75, 0x69, 0x64, 0x20, 0x44, 0x72, 0x6f, 0x69, 0x64, 0x3d, 0x22, 0x46, 0x49, 0x52,
                0x53, 0x54, 0x20, 0x46, 0x4c, 0x54, 0x20, 0x43, 0x4e, 0x54, 0x52, 0x4c, 0x22, 0x2f, 0x3e, 0x12, 0x1c,
                0x0a, 0x09, 0x2a, 0x3a, 0x2d, 0x31, 0x3a, 0x73, 0x74, 0x63, 0x70, 0x12, 0x0f, 0x46, 0x49, 0x52, 0x53,
                0x54, 0x20, 0x46, 0x4c, 0x54, 0x20, 0x43, 0x4e, 0x54, 0x52, 0x4c, 0x1a, 0x13, 0x0a, 0x04, 0x43, 0x79,
                0x61, 0x6e, 0x12, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x02,
                0x08, 0x64, 0x32, 0x4b, 0x0a, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x74, 0x65, 0x6b, 0x20, 0x47, 0x6d, 0x62,
                0x48, 0x20, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x6f, 0x78, 0x12, 0x0a, 0x57, 0x69, 0x6e,
                0x54, 0x41, 0x4b, 0x2d, 0x43, 0x49, 0x56, 0x1a, 0x19, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
                0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x31, 0x31, 0x20, 0x48, 0x6f, 0x6d, 0x65,
                0x22, 0x09, 0x34, 0x2e, 0x38, 0x2e, 0x30, 0x2e, 0x31, 0x36, 0x38, 0x3a, 0x00
        };

        var outputStream = new PipedOutputStream();
        var inputStream = new PipedInputStream(outputStream);

        outputStream.write(authBytes);
        outputStream.write(protobufBytes);

        var authMessage = XmlEventReader.readAuthFromXmlProtocol(inputStream);

        assertAuth(authMessage)
                .hasUsername("user")
                .hasPassword("pass")
                .hasUid("S-1-5-21-1650500091-1818354749-1389322093-1000");

        var message = ProtobufEventReader.readFromProtobufProtocol(inputStream);
        var messageBytes = message.toByteArray();

        var magicNumberLength = 1;
        var varintLength = 2;
        var headerLength = magicNumberLength + varintLength;

        assertThat(messageBytes.length).isEqualTo(protobufBytes.length - headerLength);

        var protobufMessageBytes = Arrays.copyOfRange(protobufBytes, headerLength, protobufBytes.length);
        assertThat(messageBytes).isEqualTo(protobufMessageBytes);
    }
}
